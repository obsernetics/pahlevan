name: Documentation Automation

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - '**/*.go'
      - 'README.md'
      - 'charts/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - '**/*.go'
      - 'README.md'
      - 'charts/**'
  schedule:
    - cron: '0 2 * * 0'  # Weekly on Sunday at 2 AM
  workflow_dispatch:

env:
  GO_VERSION: "1.24"

jobs:
  generate-docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Setup Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install documentation tools
      run: |
        # Install Go documentation tools
        go install golang.org/x/tools/cmd/godoc@latest
        go install github.com/swaggo/swag/cmd/swag@latest

        # Install Helm docs generator
        echo "Installing helm-docs..."
        curl -L -o helm-docs.tar.gz https://github.com/norwoodj/helm-docs/releases/download/v1.11.0/helm-docs_1.11.0_Linux_x86_64.tar.gz
        tar xzf helm-docs.tar.gz
        sudo mv helm-docs /usr/local/bin/
        helm-docs --version

        # Install PlantUML for diagrams
        sudo apt-get update && sudo apt-get install -y default-jre graphviz
        wget -O plantuml.jar http://sourceforge.net/projects/plantuml/files/plantuml.jar/download

        # Install markdown tools
        npm install -g markdownlint-cli markdown-toc

    - name: Install eBPF dependencies
      run: |
        sudo apt-get install -y clang llvm libbpf-dev linux-headers-generic

    - name: Generate eBPF bindings
      run: go generate ./...

    - name: Generate API documentation
      run: |
        echo "=== Generating API Documentation ==="
        mkdir -p docs/api

        # Generate Go package documentation
        echo "# API Documentation" > docs/api/README.md
        echo "" >> docs/api/README.md
        echo "Generated: $(date -u)" >> docs/api/README.md
        echo "" >> docs/api/README.md

        # Document main packages
        packages=("pkg/ebpf" "pkg/policies" "pkg/discovery" "pkg/observability")
        for pkg in "${packages[@]}"; do
          if [ -d "$pkg" ]; then
            echo "## $pkg" >> docs/api/README.md
            echo "" >> docs/api/README.md
            echo "\`\`\`go" >> docs/api/README.md
            go doc -all ./$pkg >> docs/api/README.md 2>/dev/null || echo "Package documentation not available"
            echo "\`\`\`" >> docs/api/README.md
            echo "" >> docs/api/README.md
          fi
        done

        # Generate CRD documentation
        if [ -d config/crd ]; then
          echo "# Custom Resource Definitions" > docs/api/crds.md
          echo "" >> docs/api/crds.md

          find config/crd -name "*.yaml" -o -name "*.yml" | while read -r crd_file; do
            echo "## $(basename "$crd_file")" >> docs/api/crds.md
            echo "" >> docs/api/crds.md
            echo "\`\`\`yaml" >> docs/api/crds.md
            cat "$crd_file" >> docs/api/crds.md
            echo "\`\`\`" >> docs/api/crds.md
            echo "" >> docs/api/crds.md
          done
        fi

    - name: Generate Helm chart documentation
      run: |
        echo "=== Generating Helm Chart Documentation ==="

        if [ -d charts/pahlevan-operator ]; then
          cd charts/pahlevan-operator
          helm-docs --sort-values-order=file
          cd ../..

          # Copy generated README to docs
          if [ -f charts/pahlevan-operator/README.md ]; then
            cp charts/pahlevan-operator/README.md docs/helm-chart.md
          fi
        fi

    - name: Generate architecture diagrams
      run: |
        echo "=== Generating Architecture Diagrams ==="
        mkdir -p docs/diagrams

        # Create PlantUML diagram for system architecture
        cat > docs/diagrams/architecture.puml << 'EOF'
        @startuml Pahlevan Architecture
        !theme blueprint

        title Pahlevan eBPF Kubernetes Security Operator Architecture

        cloud "Kubernetes Cluster" {
          node "Control Plane" {
            [API Server] as api
            [etcd] as etcd
          }

          node "Worker Nodes" {
            [kubelet] as kubelet
            [Container Runtime] as runtime
            [eBPF Programs] as ebpf
          }

          package "Pahlevan System" {
            [Operator] as operator
            [Policy Engine] as policy
            [Learning Engine] as learning
            [Self-Healing] as healing
            [Attack Surface Analyzer] as analyzer
          }

          package "Monitoring Stack" {
            [Prometheus] as prom
            [Grafana] as grafana
            [OpenTelemetry] as otel
          }
        }

        actor "Security Admin" as admin
        actor "DevOps Engineer" as devops

        admin --> operator : Configure Policies
        devops --> api : Deploy Applications

        operator --> api : Watch Resources
        operator --> policy : Enforce Rules
        operator --> learning : Profile Behavior

        ebpf --> operator : Security Events
        policy --> healing : Violation Detection
        healing --> api : Rollback Actions

        operator --> prom : Metrics
        analyzer --> grafana : Dashboards

        @enduml
        EOF

        # Generate PNG from PlantUML
        java -jar plantuml.jar -tpng docs/diagrams/architecture.puml || echo "PlantUML generation skipped"

        # Create data flow diagram
        cat > docs/diagrams/dataflow.puml << 'EOF'
        @startuml Data Flow
        !theme blueprint

        title Pahlevan Data Flow

        participant "Container" as container
        participant "eBPF Programs" as ebpf
        participant "Operator" as operator
        participant "Policy Engine" as policy
        participant "Learning Engine" as learning
        participant "Metrics" as metrics

        container -> ebpf : System Calls\nNetwork Traffic\nFile Access
        ebpf -> operator : Raw Events
        operator -> learning : Behavioral Data
        learning -> policy : Policy Updates
        operator -> policy : Enforcement Request
        policy -> operator : Allow/Deny Decision
        operator -> metrics : Security Metrics
        operator -> container : Enforcement Action (if needed)

        note right of learning : Adaptive Learning\nPhase Duration:\n5-30 minutes

        note right of policy : Enforcement Modes:\n- Monitoring\n- Blocking\n- Self-Healing

        @enduml
        EOF

        java -jar plantuml.jar -tpng docs/diagrams/dataflow.puml || echo "Data flow diagram generation skipped"

    - name: Generate developer documentation
      run: |
        echo "=== Generating Developer Documentation ==="

        # Create development guide
        cat > docs/DEVELOPMENT.md << 'EOF'
        # Development Guide

        ## Prerequisites

        - Go 1.24+
        - Docker
        - Kubernetes cluster (kind/minikube for local development)
        - eBPF development tools (clang, llvm)

        ## Quick Start

        1. **Clone the repository**
           ```bash
           git clone https://github.com/obsernetics/pahlevan.git
           cd pahlevan
           ```

        2. **Install dependencies**
           ```bash
           sudo apt-get install clang llvm libbpf-dev linux-headers-generic
           go mod download
           ```

        3. **Generate eBPF bindings**
           ```bash
           go generate ./...
           ```

        4. **Run tests**
           ```bash
           go test -short ./...
           ```

        5. **Build binaries**
           ```bash
           make build
           ```

        ## Development Workflow

        ### Adding New eBPF Programs

        1. Create your eBPF program in `bpf/` directory
        2. Add appropriate headers and includes
        3. Update `pkg/ebpf/bpf2go.go` with new generation directive
        4. Run `go generate ./...`
        5. Update manager.go to load your program

        ### Adding New Security Policies

        1. Define policy structure in `pkg/policies/`
        2. Implement validation logic
        3. Add policy enforcement in eBPF programs
        4. Add tests for new functionality
        5. Update documentation

        ### Testing

        ```bash
        # Unit tests
        go test ./...

        # Integration tests
        go test -tags=integration ./...

        # E2E tests
        make e2e-test

        # Benchmarks
        go test -bench=. ./...
        ```

        ## Code Style

        - Follow Go conventions (`go fmt`, `go vet`)
        - Add documentation for exported functions
        - Write tests for new functionality
        - Use meaningful variable names
        - Keep functions focused and small

        ## Debugging eBPF Programs

        1. **Enable debug logs**
           ```bash
           export EBPF_DEBUG=1
           ```

        2. **Use bpf trace tools**
           ```bash
           sudo bpftrace -l | grep pahlevan
           ```

        3. **Check eBPF maps**
           ```bash
           sudo bpftool map list
           sudo bpftool map dump id <map_id>
           ```

        ## Contributing

        1. Fork the repository
        2. Create a feature branch
        3. Make your changes
        4. Add tests
        5. Run full test suite
        6. Submit a pull request

        EOF

    - name: Generate troubleshooting guide
      run: |
        echo "=== Updating Troubleshooting Guide ==="

        cat > docs/TROUBLESHOOTING.md << 'EOF'
        # Troubleshooting Guide

        ## Common Issues

        ### eBPF Loading Failures

        **Issue**: eBPF programs fail to load
        ```
        Error: failed to load eBPF program: operation not permitted
        ```

        **Solutions**:
        1. Check kernel version: `uname -r` (requires 4.18+)
        2. Enable eBPF: `sudo sysctl kernel.unprivileged_bpf_disabled=0`
        3. Check capabilities: Ensure CAP_BPF or CAP_SYS_ADMIN
        4. Verify eBPF support: `sudo bpftool feature probe kernel`

        ### Permission Issues

        **Issue**: Permission denied when accessing system resources
        ```
        Error: permission denied
        ```

        **Solutions**:
        1. Check ServiceAccount permissions
        2. Verify RBAC configuration
        3. Ensure proper SecurityContext
        4. Check namespace permissions

        ### Memory Pressure

        **Issue**: Operator consuming too much memory
        ```
        Error: OOMKilled
        ```

        **Solutions**:
        1. Increase memory limits in deployment
        2. Check for memory leaks in eBPF maps
        3. Adjust map sizes in eBPF programs
        4. Enable memory profiling

        ### Network Policy Conflicts

        **Issue**: Network policies not working
        ```
        Warning: NetworkPolicy conflict detected
        ```

        **Solutions**:
        1. Check existing NetworkPolicies
        2. Verify CNI plugin supports NetworkPolicy
        3. Review policy selectors
        4. Check namespace isolation

        ## Diagnostic Commands

        ### Check Operator Status
        ```bash
        kubectl get pods -n pahlevan-system
        kubectl logs -f deployment/pahlevan-operator -n pahlevan-system
        kubectl describe deployment pahlevan-operator -n pahlevan-system
        ```

        ### eBPF Program Status
        ```bash
        # List loaded eBPF programs
        sudo bpftool prog list | grep pahlevan

        # Check eBPF maps
        sudo bpftool map list | grep pahlevan

        # Dump specific map contents
        sudo bpftool map dump name <map_name>
        ```

        ### Policy Debugging
        ```bash
        # List security policies
        kubectl get securitypolicies -A

        # Check policy status
        kubectl describe securitypolicy <policy-name> -n <namespace>

        # View policy events
        kubectl get events -n <namespace> --field-selector reason=PolicyViolation
        ```

        ### Performance Debugging
        ```bash
        # CPU profiling
        go tool pprof http://localhost:8080/debug/pprof/profile

        # Memory profiling
        go tool pprof http://localhost:8080/debug/pprof/heap

        # Check metrics
        curl http://localhost:8080/metrics
        ```

        ## Getting Help

        1. **Check Documentation**: Review docs/ directory
        2. **Search Issues**: Look for similar issues on GitHub
        3. **Enable Debug Logging**: Set log level to debug
        4. **Collect Diagnostics**: Run diagnostic commands above
        5. **Create Issue**: Report with full context and logs

        EOF

    - name: Update table of contents
      run: |
        echo "=== Updating Table of Contents ==="

        # Update main README TOC
        if [ -f README.md ]; then
          # Create backup
          cp README.md README.md.bak

          # Generate TOC (this is a simplified version)
          echo "Updating README.md table of contents..."
          # markdown-toc would be used here if the README has the right markers
        fi

        # Generate docs index
        cat > docs/README.md << 'EOF'
        # Pahlevan Documentation

        Welcome to the comprehensive documentation for Pahlevan eBPF Kubernetes Security Operator.

        ## Table of Contents

        ### User Documentation
        - [Quick Start](quick-start.md) - Get started quickly
        - [Installation Guide](deployment.md) - Complete installation instructions
        - [Usage Guide](USAGE.md) - How to use Pahlevan
        - [Policy Reference](policy-reference.md) - Security policy configuration

        ### Developer Documentation
        - [Development Guide](DEVELOPMENT.md) - Setup development environment
        - [API Reference](api-reference.md) - API documentation
        - [Architecture](architecture.md) - System architecture overview
        - [eBPF Programs](api/README.md) - eBPF program documentation

        ### Operations Documentation
        - [Deployment](deployment.md) - Production deployment guide
        - [Monitoring](../charts/pahlevan-operator/README.md) - Monitoring and metrics
        - [Troubleshooting](TROUBLESHOOTING.md) - Common issues and solutions
        - [System Requirements](system-requirements.md) - Hardware and software requirements

        ### Reference Documentation
        - [Helm Chart](helm-chart.md) - Helm chart configuration
        - [CRD Reference](api/crds.md) - Custom Resource Definitions
        - [LSM Support](lsm-support.md) - Linux Security Module integration

        ## Architecture Diagrams

        - [System Architecture](diagrams/architecture.png) - Overall system design
        - [Data Flow](diagrams/dataflow.png) - Data flow between components

        ## Contributing

        - [Contributing Guidelines](../CONTRIBUTING.md)
        - [Code of Conduct](../CODE_OF_CONDUCT.md)
        - [Development Workflow](DEVELOPMENT.md#development-workflow)

        ## Support

        - [Troubleshooting Guide](TROUBLESHOOTING.md)
        - [GitHub Issues](https://github.com/obsernetics/pahlevan/issues)
        - [GitHub Discussions](https://github.com/obsernetics/pahlevan/discussions)

        EOF

    - name: Validate documentation
      run: |
        echo "=== Validating Documentation ==="

        # Check for broken links
        find docs/ -name "*.md" -exec echo "Checking {}" \; -exec grep -n "http" {} \; || echo "Link check completed"

        # Validate markdown syntax
        markdownlint docs/ || echo "Markdown validation completed with warnings"

        # Check for required documentation
        required_docs=(
          "docs/README.md"
          "docs/DEVELOPMENT.md"
          "docs/TROUBLESHOOTING.md"
          "docs/api/README.md"
        )

        for doc in "${required_docs[@]}"; do
          if [ -f "$doc" ]; then
            echo "✅ $doc exists"
          else
            echo "❌ $doc missing"
          fi
        done

    - name: Generate documentation metrics
      run: |
        echo "=== Documentation Metrics ===" > docs-metrics.txt
        echo "Generated: $(date -u)" >> docs-metrics.txt
        echo "" >> docs-metrics.txt

        # Count documentation files
        total_docs=$(find docs/ -name "*.md" | wc -l)
        echo "Total documentation files: $total_docs" >> docs-metrics.txt

        # Documentation coverage (approximate)
        go_files=$(find . -name "*.go" -not -path "./vendor/*" | wc -l)
        doc_ratio=$((total_docs * 100 / go_files))
        echo "Documentation ratio: $doc_ratio%" >> docs-metrics.txt

        # Word count
        total_words=$(find docs/ -name "*.md" -exec wc -w {} + | tail -1 | awk '{print $1}')
        echo "Total documentation words: $total_words" >> docs-metrics.txt

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: generated-docs-${{ github.run_number }}
        path: |
          docs/
          docs-metrics.txt

    - name: Create documentation pull request
      if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
      uses: peter-evans/create-pull-request@v7
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "docs: Auto-update generated documentation"
        title: "📚 Automated Documentation Update"
        body: |
          ## Automated Documentation Update

          This PR contains automatically generated documentation updates:

          - 📊 API documentation regenerated
          - 🏗️ Architecture diagrams updated
          - 📖 Developer guides refreshed
          - 🔧 Troubleshooting guide updated
          - 📋 Documentation index regenerated

          ### Changes Include:
          - Updated Go package documentation
          - Refreshed CRD documentation
          - Generated Helm chart documentation
          - Updated architecture diagrams
          - Refreshed development guides

          **Auto-generated by**: Documentation Automation Workflow
          **Triggered by**: ${{ github.event_name }}
        branch: docs/auto-update-${{ github.run_number }}
        delete-branch: true