// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64

package ebpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type FileMonitorFileAccessPolicy struct {
	ContainerId  uint32
	LearningMode uint32
	AllowedPaths [1024][64]int8
	PathCount    uint32
	_            [4]byte
	LastUpdateNs uint64
}

// LoadFileMonitor returns the embedded CollectionSpec for FileMonitor.
func LoadFileMonitor() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_FileMonitorBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load FileMonitor: %w", err)
	}

	return spec, err
}

// LoadFileMonitorObjects loads FileMonitor and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*FileMonitorObjects
//	*FileMonitorPrograms
//	*FileMonitorMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadFileMonitorObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadFileMonitor()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// FileMonitorSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type FileMonitorSpecs struct {
	FileMonitorProgramSpecs
	FileMonitorMapSpecs
}

// FileMonitorSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type FileMonitorProgramSpecs struct {
	KprobeDoSysOpenat2 *ebpf.ProgramSpec `ebpf:"kprobe_do_sys_openat2"`
	KprobeVfsRead      *ebpf.ProgramSpec `ebpf:"kprobe_vfs_read"`
	KprobeVfsWrite     *ebpf.ProgramSpec `ebpf:"kprobe_vfs_write"`
}

// FileMonitorMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type FileMonitorMapSpecs struct {
	FileEvents   *ebpf.MapSpec `ebpf:"file_events"`
	FilePolicies *ebpf.MapSpec `ebpf:"file_policies"`
}

// FileMonitorObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadFileMonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type FileMonitorObjects struct {
	FileMonitorPrograms
	FileMonitorMaps
}

func (o *FileMonitorObjects) Close() error {
	return _FileMonitorClose(
		&o.FileMonitorPrograms,
		&o.FileMonitorMaps,
	)
}

// FileMonitorMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadFileMonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type FileMonitorMaps struct {
	FileEvents   *ebpf.Map `ebpf:"file_events"`
	FilePolicies *ebpf.Map `ebpf:"file_policies"`
}

func (m *FileMonitorMaps) Close() error {
	return _FileMonitorClose(
		m.FileEvents,
		m.FilePolicies,
	)
}

// FileMonitorPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadFileMonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type FileMonitorPrograms struct {
	KprobeDoSysOpenat2 *ebpf.Program `ebpf:"kprobe_do_sys_openat2"`
	KprobeVfsRead      *ebpf.Program `ebpf:"kprobe_vfs_read"`
	KprobeVfsWrite     *ebpf.Program `ebpf:"kprobe_vfs_write"`
}

func (p *FileMonitorPrograms) Close() error {
	return _FileMonitorClose(
		p.KprobeDoSysOpenat2,
		p.KprobeVfsRead,
		p.KprobeVfsWrite,
	)
}

func _FileMonitorClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed filemonitor_bpfeb.o
var _FileMonitorBytes []byte
