// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64

package ebpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type SyscallMonitorContainerPolicy struct {
	ContainerId     uint32
	LearningMode    uint32
	AllowedSyscalls [64]uint64
	ViolationCount  uint32
	_               [4]byte
	LastUpdateNs    uint64
}

type SyscallMonitorPolicyConfig struct {
	GlobalLearningMode uint32
	EnforcementEnabled uint32
	LearningWindowNs   uint64
	MaxViolations      uint32
	_                  [4]byte
}

// LoadSyscallMonitor returns the embedded CollectionSpec for SyscallMonitor.
func LoadSyscallMonitor() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_SyscallMonitorBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load SyscallMonitor: %w", err)
	}

	return spec, err
}

// LoadSyscallMonitorObjects loads SyscallMonitor and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*SyscallMonitorObjects
//	*SyscallMonitorPrograms
//	*SyscallMonitorMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadSyscallMonitorObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadSyscallMonitor()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// SyscallMonitorSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type SyscallMonitorSpecs struct {
	SyscallMonitorProgramSpecs
	SyscallMonitorMapSpecs
}

// SyscallMonitorSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type SyscallMonitorProgramSpecs struct {
	TraceSysEnterOpenat *ebpf.ProgramSpec `ebpf:"trace_sys_enter_openat"`
	TraceSysEnterRead   *ebpf.ProgramSpec `ebpf:"trace_sys_enter_read"`
	TraceSysEnterWrite  *ebpf.ProgramSpec `ebpf:"trace_sys_enter_write"`
}

// SyscallMonitorMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type SyscallMonitorMapSpecs struct {
	ContainerPolicies *ebpf.MapSpec `ebpf:"container_policies"`
	Events            *ebpf.MapSpec `ebpf:"events"`
	GlobalConfig      *ebpf.MapSpec `ebpf:"global_config"`
}

// SyscallMonitorObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadSyscallMonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type SyscallMonitorObjects struct {
	SyscallMonitorPrograms
	SyscallMonitorMaps
}

func (o *SyscallMonitorObjects) Close() error {
	return _SyscallMonitorClose(
		&o.SyscallMonitorPrograms,
		&o.SyscallMonitorMaps,
	)
}

// SyscallMonitorMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadSyscallMonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type SyscallMonitorMaps struct {
	ContainerPolicies *ebpf.Map `ebpf:"container_policies"`
	Events            *ebpf.Map `ebpf:"events"`
	GlobalConfig      *ebpf.Map `ebpf:"global_config"`
}

func (m *SyscallMonitorMaps) Close() error {
	return _SyscallMonitorClose(
		m.ContainerPolicies,
		m.Events,
		m.GlobalConfig,
	)
}

// SyscallMonitorPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadSyscallMonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type SyscallMonitorPrograms struct {
	TraceSysEnterOpenat *ebpf.Program `ebpf:"trace_sys_enter_openat"`
	TraceSysEnterRead   *ebpf.Program `ebpf:"trace_sys_enter_read"`
	TraceSysEnterWrite  *ebpf.Program `ebpf:"trace_sys_enter_write"`
}

func (p *SyscallMonitorPrograms) Close() error {
	return _SyscallMonitorClose(
		p.TraceSysEnterOpenat,
		p.TraceSysEnterRead,
		p.TraceSysEnterWrite,
	)
}

func _SyscallMonitorClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed syscallmonitor_bpfeb.o
var _SyscallMonitorBytes []byte
