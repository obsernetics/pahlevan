// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64

package ebpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type NetworkMonitorConnectionPolicy struct {
	ContainerId         uint32
	AllowedDestinations [256]uint32
	AllowedPorts        [64]uint16
	LearningMode        uint32
	LastUpdateNs        uint64
}

// LoadNetworkMonitor returns the embedded CollectionSpec for NetworkMonitor.
func LoadNetworkMonitor() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_NetworkMonitorBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load NetworkMonitor: %w", err)
	}

	return spec, err
}

// LoadNetworkMonitorObjects loads NetworkMonitor and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*NetworkMonitorObjects
//	*NetworkMonitorPrograms
//	*NetworkMonitorMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadNetworkMonitorObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadNetworkMonitor()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// NetworkMonitorSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type NetworkMonitorSpecs struct {
	NetworkMonitorProgramSpecs
	NetworkMonitorMapSpecs
}

// NetworkMonitorSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type NetworkMonitorProgramSpecs struct {
	TcMonitorEgress   *ebpf.ProgramSpec `ebpf:"tc_monitor_egress"`
	XdpMonitorNetwork *ebpf.ProgramSpec `ebpf:"xdp_monitor_network"`
}

// NetworkMonitorMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type NetworkMonitorMapSpecs struct {
	ConnectionPolicies *ebpf.MapSpec `ebpf:"connection_policies"`
	NetworkEvents      *ebpf.MapSpec `ebpf:"network_events"`
}

// NetworkMonitorObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadNetworkMonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type NetworkMonitorObjects struct {
	NetworkMonitorPrograms
	NetworkMonitorMaps
}

func (o *NetworkMonitorObjects) Close() error {
	return _NetworkMonitorClose(
		&o.NetworkMonitorPrograms,
		&o.NetworkMonitorMaps,
	)
}

// NetworkMonitorMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadNetworkMonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type NetworkMonitorMaps struct {
	ConnectionPolicies *ebpf.Map `ebpf:"connection_policies"`
	NetworkEvents      *ebpf.Map `ebpf:"network_events"`
}

func (m *NetworkMonitorMaps) Close() error {
	return _NetworkMonitorClose(
		m.ConnectionPolicies,
		m.NetworkEvents,
	)
}

// NetworkMonitorPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadNetworkMonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type NetworkMonitorPrograms struct {
	TcMonitorEgress   *ebpf.Program `ebpf:"tc_monitor_egress"`
	XdpMonitorNetwork *ebpf.Program `ebpf:"xdp_monitor_network"`
}

func (p *NetworkMonitorPrograms) Close() error {
	return _NetworkMonitorClose(
		p.TcMonitorEgress,
		p.XdpMonitorNetwork,
	)
}

func _NetworkMonitorClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed networkmonitor_bpfeb.o
var _NetworkMonitorBytes []byte
