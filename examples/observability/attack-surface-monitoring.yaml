# Attack Surface Analysis and Monitoring Example
# This example demonstrates comprehensive attack surface monitoring and analysis capabilities

apiVersion: policy.pahlevan.io/v1alpha1
kind: PahlevanPolicy
metadata:
  name: attack-surface-monitoring
  namespace: monitoring-demo
  labels:
    observability: "comprehensive"
    security-focus: "attack-surface"
  annotations:
    description: "Comprehensive attack surface monitoring and analysis demonstration"
    observability.pahlevan.io/dashboard: "attack-surface-analysis"
spec:
  # Monitor all pods in the namespace
  selector:
    matchLabels:
      monitored: "true"

  # Extended learning for comprehensive profiling
  learning:
    enabled: true
    duration: 8m
    autoTransition: true
    # Comprehensive monitoring
    syscalls: true
    network: true
    files: true
    processes: true
    # Advanced analysis
    adaptiveWindow: true
    confidenceThreshold: 0.88
    behaviorBaseline: true
    anomalyDetection: true

  # Monitoring mode for observability focus
  enforcement:
    mode: "monitor"  # Don't block, just observe
    blockUnknown: false
    gracePeriod: 60s

  # Enable self-healing for monitoring stability
  selfHealing:
    enabled: true
    rollbackThreshold: 5
    recoveryStrategy: "Rollback"

  # Comprehensive attack surface analysis
  attackSurface:
    enabled: true
    scanInterval: 2m  # Frequent scans for demo
    riskAssessment: true
    vulnerabilityScanning: true
    networkTopologyMapping: true

    # Multiple export formats for different consumers
    exporters:
      - type: "prometheus"
        endpoint: "http://prometheus:9090/metrics"
        interval: "30s"
      - type: "json"
        path: "/var/log/pahlevan/attack-surface.json"
        interval: "1m"
      - type: "grafana"
        dashboardId: "attack-surface-analysis"
        endpoint: "http://grafana:3000"
      - type: "otel"
        endpoint: "http://jaeger:14268/api/traces"

    # Risk assessment configuration
    riskMatrix:
      high:
        - "privilegedContainers"
        - "exposedSensitivePorts"
        - "dangerousSyscalls"
      medium:
        - "networkCommunication"
        - "fileSystemAccess"
        - "processExecution"
      low:
        - "standardLibraryAccess"
        - "regularFileIO"

  # Advanced observability configuration
  observability:
    # High-frequency metrics collection
    metrics:
      enabled: true
      interval: 15s
      exporters: ["prometheus", "otel"]
      customMetrics:
        - "attack_surface_score"
        - "risk_assessment_level"
        - "vulnerability_count"
        - "network_exposure_score"

    # Distributed tracing
    tracing:
      enabled: true
      sampler: "probabilistic"
      samplingRate: 0.3  # Higher rate for demo
      exporters: ["jaeger", "otel"]

    # Structured logging
    logging:
      enabled: true
      level: "info"
      structuredLogging: true
      attackSurfaceLogging: true
      riskAssessmentLogging: true

    # Multiple alert channels
    alerts:
      enabled: true
      channels:
        - type: "webhook"
          endpoint: "http://alertmanager:9093/api/v1/alerts"
        - type: "slack"
          webhook: "https://hooks.slack.com/services/YOUR_WORKSPACE_ID/YOUR_CHANNEL_ID/YOUR_WEBHOOK_TOKEN"
          channel: "#security-alerts"
        - type: "email"
          recipients: ["security@company.com"]
        - type: "pagerduty"
          integrationKey: "YOUR_PAGERDUTY_KEY"

      # Comprehensive alerting conditions
      conditions:
        - event: "attackSurfaceExpanded"
          severity: "medium"
          threshold: "20%"
        - event: "newVulnerabilityDetected"
          severity: "high"
        - event: "riskScoreIncreased"
          severity: "medium"
          threshold: "0.7"
        - event: "unusualNetworkActivity"
          severity: "low"
        - event: "privilegeEscalationAttempt"
          severity: "critical"

  # Security monitoring profiles
  monitoringProfiles:
    - name: "web-application"
      indicators:
        - "httpConnections"
        - "sqlQueries"
        - "fileUploads"
        - "authenticationAttempts"

    - name: "database"
      indicators:
        - "databaseConnections"
        - "dataAccess"
        - "privilegedOperations"
        - "backupOperations"

    - name: "microservice"
      indicators:
        - "serviceToServiceCalls"
        - "apiEndpointAccess"
        - "circuitBreakerEvents"

---
# Multi-tier application for comprehensive monitoring
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-frontend
  namespace: monitoring-demo
  labels:
    tier: frontend
    monitored: "true"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: web-frontend
      tier: frontend
      monitored: "true"
  template:
    metadata:
      labels:
        app: web-frontend
        tier: frontend
        monitored: "true"
      annotations:
        pahlevan.io/monitoring-profile: "web-application"
    spec:
      containers:
      - name: nginx
        image: nginx:1.25-alpine
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-backend
  namespace: monitoring-demo
  labels:
    tier: backend
    monitored: "true"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api-backend
      tier: backend
      monitored: "true"
  template:
    metadata:
      labels:
        app: api-backend
        tier: backend
        monitored: "true"
      annotations:
        pahlevan.io/monitoring-profile: "microservice"
    spec:
      containers:
      - name: api
        image: node:18-alpine
        command:
        - "/bin/sh"
        - "-c"
        - |
          # Simple API server for demo
          cat > server.js << 'EOF'
          const http = require('http');
          const server = http.createServer((req, res) => {
            // Simulate various API operations
            if (req.url === '/api/data') {
              res.writeHead(200, {'Content-Type': 'application/json'});
              res.end('{"data": "example", "timestamp": "' + Date.now() + '"}');
            } else if (req.url === '/health') {
              res.writeHead(200, {'Content-Type': 'text/plain'});
              res.end('OK');
            } else {
              res.writeHead(404);
              res.end('Not Found');
            }
          });
          server.listen(3000, () => console.log('API server running on port 3000'));
          EOF
          node server.js
        ports:
        - containerPort: 3000
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "300m"

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: database
  namespace: monitoring-demo
  labels:
    tier: database
    monitored: "true"
spec:
  serviceName: database-service
  replicas: 1
  selector:
    matchLabels:
      app: database
      tier: database
      monitored: "true"
  template:
    metadata:
      labels:
        app: database
        tier: database
        monitored: "true"
      annotations:
        pahlevan.io/monitoring-profile: "database"
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          value: "monitoring_demo"
        - name: POSTGRES_USER
          value: "demo_user"
        - name: POSTGRES_PASSWORD
          value: "demo_password"
        ports:
        - containerPort: 5432
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 1Gi

---
# Services
apiVersion: v1
kind: Service
metadata:
  name: web-frontend-service
  namespace: monitoring-demo
spec:
  selector:
    app: web-frontend
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: api-backend-service
  namespace: monitoring-demo
spec:
  selector:
    app: api-backend
  ports:
  - protocol: TCP
    port: 3000
    targetPort: 3000
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: database-service
  namespace: monitoring-demo
spec:
  selector:
    app: database
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
  type: ClusterIP

---
# Traffic generator for attack surface analysis
apiVersion: apps/v1
kind: Deployment
metadata:
  name: traffic-generator
  namespace: monitoring-demo
  labels:
    utility: "traffic-generator"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: traffic-generator
  template:
    metadata:
      labels:
        app: traffic-generator
    spec:
      containers:
      - name: generator
        image: alpine:3.18
        command:
        - "/bin/sh"
        - "-c"
        - |
          # Install curl for API testing
          apk add --no-cache curl postgresql-client

          # Generate varied traffic patterns for attack surface analysis
          while true; do
            # Normal web traffic
            curl -s http://web-frontend-service/ > /dev/null 2>&1 || true
            curl -s http://web-frontend-service/health > /dev/null 2>&1 || true

            # API calls
            curl -s http://api-backend-service:3000/api/data > /dev/null 2>&1 || true
            curl -s http://api-backend-service:3000/health > /dev/null 2>&1 || true

            # Database connectivity check
            PGPASSWORD=demo_password psql -h database-service -U demo_user -d monitoring_demo -c "SELECT 1;" > /dev/null 2>&1 || true

            # Generate some variations in traffic patterns
            if [ $(( $(date +%s) % 30 )) -eq 0 ]; then
              # Burst traffic
              for i in $(seq 1 10); do
                curl -s http://api-backend-service:3000/api/data > /dev/null 2>&1 || true
              done
            fi

            sleep 2
          done
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"

---
# Create namespace
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring-demo
  labels:
    monitoring: "enabled"
    demo: "attack-surface"